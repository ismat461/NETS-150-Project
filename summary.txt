********************************************/
Name of Project: MusiciNATOR
Authors: Ismat Agwedicham & Anuoluwa Akibu
TA: David Feng

**************************/
Description of Project
*************************/
Our project was implementation based. We implemented a recommendation system through
via an interactive terminal. We merged two datasets of songs and their respective audio
features* (which in our code we often refer to as "parameters") and then reduced the size
of the set to a map of 3991 songs. (Disclaimer: Some songs do contain swear words).
During a run of the interactive terminal, 10 songs are randomly chosen to be given to the
user who is prompted to pick 2 songs they like. These two songs are then compared to all the
other songs in the map for similarities based on audio features.

Then our code searches for songs found in at least 5 or more ranges (avg +- std) of the parameters. A song
in 5+ ranges (i.e. fits within the target range of the user-selected song's audio features) is deemed similar
to the input song. This results in two groups: songs similar to the first and second user-selected songs
respectively. Our code will then return either:
1) the intersection of songs that fit 1 and 2
OR
2) the union of songs that fit 1 or 2 in the
case no songs were found in the intersection
--------------------------------------------------------------------
FOOTNOTE:
*Audio Features / Parameters (Qualitative and Quantitative): Artist, Featured Artists,
Release Date, Genre, Popularity, Danceability, Energy, Loudness, Speechiness, Acousticness,
Liveness, Tempo, Valence, Duration (ms)

**************************/
Categories Used
*************************/
1. Recommendation
In order to find similarities between parameters, we used the genres of the user-selected
songs as the base group for aggregating the data. Since genres are characterized by possessing
certain audio features, we decided that grouping songs by data and then finding target ranges of
the audio features for each genre associated with each genre with averages and standard deviation.

For example, say the genre of a selected song was rock, for the quantitative parameters we would:
1) average all the songs in the genre's data associated with the parameter
2) find a standard deviation of this data

This was to form a target range of each parameter. Given this associated target range for each parameter
of songs in the rock genre, we would then look for songs that satisfy this range. This is done across all
parameters for both of the user's selected songs.

************************************************/
User Manual - Captions for Photos in Screenshots
************************************************/
Step 1. Intial screen with 10 songs for the user to select from. The user
        should type the first song's name and then press enter. Then the user
        should type the second song's name on the second line, press enter, and
        wait for confirmation.
Step 2. Confirmation of received user input
Step 3. 10 recommended songs that are similar to both songs the user inputted,
        will be returned to the user.

**************************/
Work Breakdown
*************************/
Ismat
- Added the featured artists column into the data set
- Added a second song input to the interactive terminal
- Both figured out method of storing and processing all the songs' parameters (Integer Hashmap)
- We both worked on the how to compare all the song's parameters and store them in a
  usable data structure, integer hashmap.
- We both processed the parameters with numbers.
- Interpreted integer hashmap to create a song fit arraylist of songs to return to the user in STC.
- Refactored code

Anuoluwa
- Used Regex to capture data from lines read from data.txt and cleaned the song data
  (removed "with" and other extraneous information from data)
- Created the randomizer and the interactive terminal where the user picks one of the 10 songs
- Both figured out method of storing and processing all the songs' parameters (String -> ArrayList<Integer> Hashmap)
- Worked on method comparing the string parameters and comparing the number parameters.
- Created functions for the STC concept (closure of songs in song1 and song2's with song 1 and song 2) set of songs
- Debugged code

****************************/
Links to Outside Resources
****************************/
The data we used:
1. https://www.kaggle.com/datasets/leonardopena/top-spotify-songs-from-20102019-by-year
2. https://www.kaggle.com/datasets/imuhammad/audio-features-and-lyrics-of-spotify-songs

The sources of outside research we did:
1. https://www.therecordindustry.io/analyzing-spotify-audio-features/
2. https://www.kaylinpavlik.com/classifying-songs-genres/